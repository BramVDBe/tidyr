% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pack.R
\name{unpack}
\alias{unpack}
\title{Pack and packing}
\usage{
unpack(df, col, ptype = NULL)
}
\arguments{
\item{df}{A data frame.}

\item{col}{Column to unchop (automatically quoted).

This should be a list-column containing generalised vectors (e.g.
any mix of \code{NULL}s, atomic vector, S3 vectors, a lists, or data frames).}

\item{ptype}{Optionally, supply a prototype for the output \code{col}, overriding
the default that will be guessed from the combination of individual
values.}
}
\description{
Packing and unpacking preserve the length of a data frame, changing its
width. \code{chop()} makes \code{df} shorter by converting rows within each group
into list-columns. \code{unchop()} makes \code{df} longer by expanding list-columns
so that each element of the list-column gets its own row in the output.
Learn more in \code{vignette("chop-pack-nest")}.
}
\examples{
df <- tibble(x = 1:3, y = list(c(a = 1L), c(a = 1, b = 2), c(b = 3)))
df \%>\% unpack(y)

df <- tibble(x = 1:4, y = list(integer(), 1, 2:3, 4:6))
df \%>\% unpack(y)

# Lists of data frames ------------------------------------------------
# A list of data frames becomes multiple list-cols because unpack()
# preserves the length of the input
df <- tibble(x = 1:3, y = list(NULL, tibble(a = 1, b = 2), tibble(b = 1:3)))
df \%>\% unpack(y)

# Data frame column ---------------------------------------------------
df <- tibble(x = 1:3, y = tibble(a = 1:3, b = 3:1))
df \%>\% unpack(y)
}
